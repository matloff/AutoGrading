
# assumes a Unix-family machine, i.e. Mac or Linux

# script to semi-automate project grading; see HOW TO RUN below for an
# overview 

# find the subdirectories, one for each student group
getgdirs <- function() {
   gdirs <- list.dirs(recursive=F)
   gdirs[gdirs != "."]
}

# unpack .tar file, find student names, check for proper structure
unpack <- function() {
   tmp <- list.files(pattern=".tar")
   # should be just one tar file, no further subdirectories
   if (length(tmp) != 1) {
      print(paste("problem in subdirectory",getwd())) 
      return(NULL)
   }
   grpname <- tmp[1]
   tmp <- grpname
   ntmp <- nchar(tmp)
   # not a .tar file?
   if (substr(tmp,ntmp-3,ntmp) != ".tar") {
      print(paste("problem in subdirectory",getwd())) 
      return(NULL)
   }
   # unpack the group's tar file
   system("tar xf *.tar")
   grpname <- substr(tmp,1,ntmp-4)
   emailaddrs <- strsplit(grpname,".",fixed=T)
   list(grpname=grpname, emailaddrs=emailaddrs)
}

# pdfcmd is the PDF view you wish to use
# startdir is used if you have already graded some groups in a previous
#    session
grader <- function(pdfcmd='open') 
{
   print('NOTE: best run under "script" in case of weird error"')
   askOK <- paste0('the PDF viewer command is ',pdfcmd,', OK? ')
   ok <- readline(askOK)
   if (substr(ok,1,1) != 'y') stop('exiting due to no PDF command')
   basedir <- getwd()
   on.exit(setwd(basedir))
   gdirs <- getgdirs()  # get group subdirectory names
   output <- NULL
   # go through all subdirectories. one per group
   for (gdir in gdirs) {  
      print(paste("\n entering directory", gdir))
      setwd(gdir)
      # try to open this group's .tar file, check for subdirectories
      # (not allowed`), get student names etc.
      tmp <- unpack()
      if (is.null(tmp)) {
         print(paste("unpack() had problems in: ", gdir))
         print("giving up; NOTE PENALTY, grade separately later")
         grade <- 'I'
         emailaddrs <- gdir
         cmntsline <- 'COULD NOT UNPACK'
      } else {
         # original tar file name, without ".tar"
         grpname <- tmp$grpname
         # vector of individual e-mail addresses, without @ucdavis.edu
         emailaddrs <- tmp$emailaddrs
         cat("\n\n","  now grading",grpname,"\n")
         # see what files are there; do they have the proper files,
         # including .tex?; which PDF to view?
         if (!checkForFiles()) {
            print('************** no .pdf file')
         } else {
            pdfFile <- 'ProjectReport.pdf'
            cmd <- paste(pdfcmd,pdfFile)
            print(cmd)
            readline("hit Enter to read PDF file, EXIT reader when done ")
            system(cmd)
         }
         print('enter comments, then ctrl-d')
         cmnts <- readLines()
         cmnts <- paste(cmnts,collapse=';')
         cmntsline <- paste("# ",cmnts)
         grade <- readline("enter grade:  ") 
         if (!grade %in% 
           c('A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-','F'))
           stop('multiline input to some prompt?')
      }
      # definitely will reach here unless could not unpack
      for (emaddr in emailaddrs[[1]]) {
         studentgradeline <- paste(emaddr,grade)
         print(studentgradeline)
         print(cmntsline)
         output <- c(output,studentgradeline,cmntsline)
      }

      # leave dir for this group, back to top level
      setwd(basedir)

      # backup results
      save(output,file='outfile')
      plain_gdir <- substr(gdir,3,nchar(gdir))
      ofname <- paste0('outfile.',plain_gdir)
      system(paste0('cp outfile ../',ofname))

      cat('output length = ',length(output),'\n')
      readline('Enter or ctrl-c')

   }
   print(output)
   repeat {
      if (readline("need to edit? ") == "y") {
         output <<- edit(output)
      } else break
   }
   cat("\n","results:","\n")
   save(output,file="outfile")
   cat(output,file='ProjectGrades',sep='\n')
}

checkForFiles <- function() {
         fls <- list.files()
         suffixes <- getSuffixex(fls)
         if (!('R' %in% suffixes)) 
            print('no .R file')
         if (!('tex' %in% suffixes)) 
            print('no .tex file')
         if (!('jpg' %in% suffixes) && !('JPG' %in% suffixes)) 
            print('no image file')
         file.exists('ProjectReport.pdf')
}

emailresults <- function() {
   # if sending mail requires a password, remind the user
   readline("set password externally (if any), then hit Enter")
   load("outfile")
   for (l in output) {
      tmp <- strsplit(l," ")[[1]]
      if (tmp != "#") {
         emailaddr <- tmp[1]
         emailaddr <- paste(emailaddr,"@ucdavis.edu",sep="")
         cat(l,file="onestudent")
         tosend <- paste("mutt",emailaddr,"-s 'project results' < onestudent")
         system(tosend)
         print(l)
         system("sleep 10")
         system("/bin/rm onestudent")
      }
   }
}

# evaluate the given R expression; note: set any needed globals,
# including functions, at the R prompt before calling grader(); also
# note: in principle, a student can put multiple R statements within one
# line, separated by semicolons, but it is not recommended to have them
# write full code, e.g. full functions--it almost always has syntax
# errors etc.
evalrstring <- function(toexec) {
   cat(toexec,file="tmpexec")
   sourceresult <- try(source("tmpexec"))
   if (class(sourceresult) == "try-error" || 
      !is.numeric(sourceresult$value)) {
      print("R parse error at:")
      print(toexec)
      return(NA)
   } else return(sourceresult$value)
}

# extract suffixes from file names
getSuffixex <- function(fnames) 
{
    tmp <- strsplit(fnames,'.',fixed=TRUE)
    getLast <- function(vec)  # extract last elt in vec 
       vec[length(vec)]
    sapply(tmp,getLast)
}
